#include "SphereDepth.cg"

struct VSOutput {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float3 eyeSpacePos : TEXCOORD1;
};

VSOutput passThroughVS(
	float4 position : POSITION)
{
    VSOutput OUT;

    OUT.position = position;

    return OUT;
}

VSOutput particleSphereVS(
	float4 position : POSITION,
	float2 texCoord : TEXCOORD0,
	uniform float4x4 modelViewMatrix,
	uniform float4x4 projectionMatrix)
{
	VSOutput OUT;
	
	float4 eyeSpacePos = mul(modelViewMatrix, position);
	OUT.position = mul(projectionMatrix, eyeSpacePos);
	OUT.eyeSpacePos = eyeSpacePos.xyz;
	OUT.texCoord = texCoord; 
	
	return OUT;
}

// ----------------------------------

void simplestPS(out float4 fragColor : COLOR) {
    fragColor = float4(0.0, 0.0, 1.0, 1.0);
}

struct PSOutput {
	float fragDepth : DEPTH;
	float4 fragColor : COLOR;
};

PSOutput particleSphereDiffusePS(
	float2 texCoord : TEXCOORD0,
	float3 eyeSpacePos : TEXCOORD1,
	uniform float sphereRadius, // TODO!: sync with PhysX params...
	//float4 color : COLOR0, // TODO later: use for density?
	uniform float4x4 projectionMatrix,
	uniform float3 lightDir,
	uniform float ambient) 
{
	float4 color = float4(0,0,1,1); 
	
	PSOutput OUT;
	
	float3 N;
    float4 pixelPos;
	OUT.fragDepth = computeSphereDepth(texCoord, eyeSpacePos, sphereRadius, projectionMatrix, N, pixelPos);
	
	// simple diffuse and ambient shading
	float diffuse = max(0.0, dot(N, lightDir));
	OUT.fragColor = diffuse * color + ambient * color;
	
	//OUT.fragColor = float4(N, 1);//OUT.fragDepth;//float4(1,0,0,1);
	
	return OUT;
}

void particleSphereDepthPS(
	float2 texCoord : TEXCOORD0,
	float3 eyeSpacePosParticle : TEXCOORD1,
	uniform float sphereRadius, // TODO!: sync with PhysX params...
	uniform float4x4 projectionMatrix,
	out float fragDepth : DEPTH,
	out float fragColor : COLOR)
{
	float3 N;
    float4 pixelPos;
	float2 depth = computeSphereDepth(texCoord, eyeSpacePosParticle, sphereRadius, projectionMatrix, N, pixelPos);
    fragColor = depth[0];
    //fragColor = eyeSpacePos; 
	fragDepth = depth[1];
}

void particleSphereThicknessPS(
	float2 texCoord : TEXCOORD0,
	float3 eyeSpacePosParticle : TEXCOORD1,
	uniform float sphereRadius,
	uniform float4x4 projectionMatrix,
	out float fragColor : COLOR)
    // TODO!: write depth as well?
{
    float3 N;
    float4 pixelPos;
	computeSphereDepth(texCoord, eyeSpacePosParticle, sphereRadius, projectionMatrix, N, pixelPos); 
//
    //fragColor = mul(distance(float4(eyeSpacePos, 0.0), pixelPos), projectionMatrix).length();

    fragColor = 0.2 * N.z;
}
